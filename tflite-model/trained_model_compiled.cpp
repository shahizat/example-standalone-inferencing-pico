/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.07.2022 19:22:55

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 512;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[14];
TfLiteEvalTensor tflEvalTensors[14];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[5];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(16) float tensor_data1[4] = { -0.19125624001026154, 0.34701302647590637, -0.090042613446712494, -0.2874341607093811, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) float tensor_data2[16] = { -0.31833615899085999, -0.076950900256633759, 0.19534136354923248, -0.050700947642326355, -0.1157258003950119, -0.2512538731098175, 0.28704729676246643, 0.21634741127490997, 0.014379275962710381, 0.72655284404754639, 0.016931327059864998, -0.046400997787714005, -0.081371113657951355, -0.15032593905925751, -0.20511829853057861, 0.28892976045608521, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const ALIGN(16) float tensor_data3[16] = { 0.088382251560688019, -0.034321952611207962, -0.13433770835399628, -0.23444995284080505, -0.37143149971961975, 0.18867264688014984, -0.048692025244235992, -0.12584911286830902, -0.062291741371154785, 0.12461622804403305, -0.055817354470491409, -0.25415205955505371, -0.094876401126384735, 0.27997341752052307, 0.30402714014053345, -0.026262776926159859, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const ALIGN(16) float tensor_data4[32] = { -0.0066262921318411827, -0.11463485658168793, -0.16533738374710083, 0.31381043791770935, -0.07860063761472702, 0.02953733317553997, -0.035690069198608398, -0.042674753814935684, -0.047006338834762573, 0.0083740241825580597, -0.13041684031486511, -0.099253453314304352, 0.052985589951276779, -0.098065197467803955, -0.07881704717874527, -0.32084661722183228, -0.02766234427690506, 0.010506921447813511, 0.065055057406425476, -0.09721846878528595, 0.170418381690979, 0.031343959271907806, -0.052932973951101303, -0.09386017918586731, -0.15563949942588806, 0.002598742488771677, -0.0067641320638358593, -0.079988479614257812, -0.06752854585647583, -0.16799105703830719, 0.38871344923973083, -0.087214268743991852, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const ALIGN(16) float tensor_data5[32*33] = { 
  -0.26793882250785828, 0.2024025171995163, 0.14320369064807892, -0.011531391181051731, -0.12005247175693512, -0.21046900749206543, 0.33711525797843933, 0.010352581739425659, -0.18869064748287201, -0.34307533502578735, 0.069805145263671875, -0.064954660832881927, 0.038062267005443573, -0.19014877080917358, -0.057887595146894455, -0.1869179755449295, 0.043037209659814835, 0.14640256762504578, 0.29831969738006592, -0.11893998831510544, 0.0088618779554963112, 0.14943155646324158, -0.17811663448810577, -0.036386806517839432, -0.32583057880401611, 0.20832419395446777, 0.00070504413451999426, -0.092173375189304352, 0.081047363579273224, 0.23482251167297363, -0.21866884827613831, 0.005213594064116478, -0.40014460682868958, 
  -0.01518335472792387, -0.025652401149272919, -0.10424512624740601, 0.16500680148601532, -0.11054269224405289, -0.3115418553352356, 0.19398413598537445, -0.18505659699440002, 0.015275443904101849, -0.019773492589592934, -0.14193113148212433, -0.26590099930763245, 0.13862825930118561, -0.38298970460891724, -0.13426314294338226, 0.0087418882176280022, 0.18714199960231781, -0.31510332226753235, 0.17663478851318359, -0.33921143412590027, -0.41612839698791504, 0.01439144741743803, 0.024415029212832451, 0.16061075031757355, -0.18033158779144287, -0.16307781636714935, -0.12699612975120544, 0.079912222921848297, -0.13290387392044067, 0.19936668872833252, -0.11664126813411713, 0.059895224869251251, -0.11995141953229904, 
  0.0041657383553683758, -0.46287432312965393, -0.1026298999786377, 0.058437667787075043, 0.10950411111116409, -0.26985439658164978, -0.11364077776670456, -0.22707346081733704, 0.22906862199306488, -0.032245650887489319, -0.19717086851596832, -0.13422808051109314, -0.24679693579673767, 0.19394269585609436, 0.016781376674771309, -0.13808649778366089, -0.10711562633514404, -0.098766148090362549, 0.058046400547027588, 0.29059496521949768, -0.25539758801460266, 0.19843481481075287, -0.21497446298599243, -0.025176942348480225, -0.28206688165664673, 0.13466477394104004, -0.2904517650604248, -0.2460714727640152, 0.24827741086483002, 0.057434231042861938, 0.27366402745246887, -0.037303697317838669, 0.0096323974430561066, 
  -0.17445732653141022, 0.62230789661407471, 0.035808995366096497, 0.34878936409950256, 0.14139899611473083, 0.19608236849308014, 0.28450649976730347, -0.16209949553012848, 0.0030134404078125954, -0.21075065433979034, -0.11681301146745682, 0.27959823608398438, 0.21673254668712616, -0.048153668642044067, 0.27256482839584351, 0.033216595649719238, 0.19896240532398224, 0.26386979222297668, -0.26637104153633118, -0.30438652634620667, -0.12335708737373352, 0.0098868953064084053, 0.21932013332843781, 0.52455133199691772, 0.32067766785621643, 0.37910661101341248, -0.15608124434947968, -0.088420882821083069, -0.28658515214920044, -0.29825881123542786, 0.18453021347522736, 0.14763268828392029, 0.078714221715927124, 
  -0.002559971995651722, 0.16060926020145416, -0.29247844219207764, -0.019676679745316505, 0.059001658111810684, 0.089041240513324738, 0.12576420605182648, 0.28435993194580078, 0.26060211658477783, 0.26399961113929749, -0.14590688049793243, 0.10753621906042099, -0.072331503033638, -0.30714124441146851, 0.20499686896800995, -0.066297896206378937, 0.037517476826906204, 0.040505826473236084, -0.10550016164779663, 0.14195166528224945, -0.1900240033864975, 0.14876221120357513, 0.072585366666316986, 0.1499803215265274, -0.23650865256786346, -0.061070714145898819, 0.20474939048290253, 0.14663732051849365, -0.0052688140422105789, 0.17640945315361023, 0.1724616140127182, 0.053647328168153763, -0.2325206845998764, 
  0.1452934741973877, 0.052607331424951553, 0.1409236341714859, 0.33938103914260864, 0.14973157644271851, -0.0054370453581213951, 0.017203180119395256, -0.096610352396965027, -0.25401002168655396, 0.0059323771856725216, -0.16620376706123352, -0.027150731533765793, -0.23034077882766724, -0.13872414827346802, 0.1468975692987442, -0.16392947733402252, -0.0092295585200190544, -0.16124308109283447, 0.016511380672454834, -0.11789174377918243, 0.037220586091279984, 0.065299779176712036, 0.28302308917045593, 0.2007920891046524, 0.20639210939407349, 0.076574623584747314, 0.23371906578540802, 0.19773843884468079, -0.25238701701164246, -0.16435575485229492, -0.028993392363190651, -0.22334656119346619, 0.31834742426872253, 
  -0.24961173534393311, -0.10226310044527054, -0.25057369470596313, 0.0023022859822958708, 0.12835367023944855, -0.17440830171108246, -0.35264605283737183, 0.25553923845291138, -0.089390799403190613, 0.005036789458245039, -0.084522008895874023, -0.077359087765216827, -0.073949068784713745, -0.069191887974739075, -0.19701044261455536, 0.048423163592815399, -0.26159214973449707, 0.15075026452541351, -0.18039628863334656, 0.011487295851111412, -0.212723508477211, 0.0056345425546169281, 0.067949362099170685, -0.080886095762252808, -0.26242458820343018, 0.20888690650463104, -0.32506924867630005, 0.24367405474185944, 0.014287456870079041, 0.18774059414863586, 0.10282280296087265, -0.040597811341285706, -0.18575739860534668, 
  -0.14253534376621246, 0.094053834676742554, -0.095624767243862152, 0.049917168915271759, -0.22227455675601959, 0.23974031209945679, 0.27225571870803833, 0.24752187728881836, 0.091996684670448303, 0.2548498809337616, -0.046145170927047729, -0.31994518637657166, 0.17633326351642609, -0.22935755550861359, 0.031752441078424454, -0.090828701853752136, 0.25441253185272217, 0.21126881241798401, 0.055320978164672852, -0.31120315194129944, -0.30360576510429382, 0.11484627425670624, -0.2750822901725769, -0.10546538233757019, -0.054141562432050705, -0.0082368031144142151, -0.16786161065101624, -0.30686205625534058, -0.22482727468013763, -0.27942574024200439, 0.020378464832901955, -0.3406120240688324, -0.068479254841804504, 
  0.0007262006402015686, -0.22702240943908691, -0.26737076044082642, 0.22210432589054108, -0.11799260228872299, 0.05097145214676857, 0.19152894616127014, -0.14738331735134125, -0.14778046309947968, -0.27260652184486389, -0.054217610508203506, 0.10262918472290039, -0.10820324718952179, -0.22533632814884186, -0.19078044593334198, -0.21882857382297516, -0.30619460344314575, 0.24434101581573486, -0.0027174651622772217, 0.17769187688827515, -0.25008437037467957, -0.028158022090792656, -0.2543589174747467, 0.10550428181886673, -0.31709215044975281, 0.10253866016864777, 0.11420509964227676, 2.3153820037841797, 2.2255241870880127, 0.1519944965839386, -0.22792218625545502, 0.051648426800966263, -0.2079864889383316, 
  -0.10273122042417526, 0.019093496724963188, 0.11785786598920822, 0.13213512301445007, -0.029120614752173424, 0.15568648278713226, 0.13068696856498718, 0.26209098100662231, -0.20142656564712524, -0.10351259261369705, -0.038022246211767197, 0.14846432209014893, 0.26256522536277771, -0.33887457847595215, 0.17426110804080963, 0.17422625422477722, 0.079654231667518616, 0.00036211049882695079, 0.098891764879226685, 0.12629367411136627, -0.043317403644323349, -0.31955894827842712, 0.037948757410049438, 0.092798024415969849, -0.37716475129127502, -0.24793669581413269, -0.079222768545150757, -0.096297413110733032, -0.053312599658966064, 0.185198575258255, -0.18397863209247589, 0.013485931791365147, -0.30866318941116333, 
  -0.37083408236503601, -0.37557485699653625, -0.29646506905555725, -0.020524961873888969, -0.10735223442316055, 0.0096076847985386848, -0.1586020439863205, -0.051591485738754272, -0.29261213541030884, -0.35946550965309143, -0.26369452476501465, 0.18826617300510406, -0.29886257648468018, -0.094454497098922729, -0.20986875891685486, -0.26682108640670776, -0.10110656917095184, -0.20905126631259918, -0.082504168152809143, 0.12726865708827972, -0.33118724822998047, -0.25940790772438049, -0.41454729437828064, 0.099457420408725739, -0.051598545163869858, -0.39303243160247803, -0.26635921001434326, -0.38215333223342896, -0.47628271579742432, -0.22726151347160339, -0.17536510527133942, 0.18481583893299103, -0.047016408294439316, 
  0.20222288370132446, -0.33865401148796082, 0.055956069380044937, 0.17866078019142151, -0.04810275137424469, 0.15505808591842651, -0.11144083738327026, 0.13826054334640503, -0.16721287369728088, 0.20385032892227173, -0.010754232294857502, 0.22322209179401398, 0.11002755910158157, -0.2994791567325592, 0.16119477152824402, 0.15460819005966187, -0.065836384892463684, 0.061578426510095596, 0.2090567946434021, -0.33818387985229492, -0.26121023297309875, -0.12672002613544464, -0.20376408100128174, -0.032683230936527252, 0.047778300940990448, -0.22359389066696167, -0.1455339640378952, -0.090980350971221924, 0.16053548455238342, -0.040656059980392456, -0.13391686975955963, 0.087872982025146484, 0.060380209237337112, 
  0.059157345443964005, -0.10267511010169983, -0.0082903122529387474, 0.20093381404876709, -0.2598797082901001, -0.063193924725055695, 0.0063787302933633327, -0.24335658550262451, -0.14017410576343536, 0.23144739866256714, 0.065101340413093567, 0.014310943894088268, 0.010287872515618801, -0.14102359116077423, -0.2021002471446991, -0.28820440173149109, 0.2824881374835968, 0.02932455949485302, -0.00466194748878479, -0.3156033456325531, -0.13879776000976562, -0.19446662068367004, 0.040750667452812195, 0.074822619557380676, -0.075078174471855164, -0.0060723950155079365, -0.23844113945960999, -0.24783143401145935, -0.13316604495048523, 0.1419336199760437, -0.092636160552501678, 0.09566158801317215, 0.21694819629192352, 
  0.0088743614032864571, -0.15245652198791504, -0.29198586940765381, -0.10301396995782852, 0.23996829986572266, 0.042591936886310577, -0.1907326877117157, 0.1291787326335907, 0.010694831609725952, -0.18236906826496124, -0.15666626393795013, 0.17965058982372284, 0.13950298726558685, -0.2196815013885498, -0.26115819811820984, -0.31627804040908813, -0.022528473287820816, 0.1930699348449707, 0.17113670706748962, 0.3078978955745697, 0.0056114848703145981, -0.17584247887134552, -0.34657472372055054, 0.12692451477050781, -0.22024182975292206, -0.087715104222297668, 0.248583123087883, 0.17709341645240784, -0.28680965304374695, -0.01344868540763855, 0.025673767551779747, -0.038376826792955399, 0.2057708352804184, 
  -0.28084570169448853, -0.12546007335186005, 0.15076546370983124, -0.20290349423885345, -0.11270438879728317, 0.0091589400544762611, -0.26311421394348145, -0.20240961015224457, 0.23773574829101562, -0.36319655179977417, -0.21450714766979218, -0.036776412278413773, -0.11807668954133987, -0.11432565748691559, 0.01330886222422123, 0.11441987007856369, -0.19512493908405304, -0.26714491844177246, -0.24888518452644348, 0.2194829136133194, 0.011545154266059399, -0.32941225171089172, 0.13078479468822479, -0.037895731627941132, -0.27663171291351318, -0.090255260467529297, -0.37622010707855225, -0.15775246918201447, -0.033743627369403839, -0.076703727245330811, 0.1736905574798584, -0.057798780500888824, -0.28791129589080811, 
  -0.31547138094902039, -0.5532689094543457, 0.050117593258619308, -0.01090539712458849, 0.010787592269480228, -0.14508159458637238, 0.21015173196792603, 0.22910153865814209, -0.16433341801166534, -0.12402438372373581, -0.046417724341154099, -0.055478900671005249, -0.34422898292541504, -0.17913669347763062, -0.27598473429679871, -0.24094244837760925, -0.049891497939825058, 0.050107564777135849, 0.18288260698318481, 0.23258697986602783, -0.28502997756004333, 0.0050627053715288639, -0.14017370343208313, -0.14048236608505249, -0.13884465396404266, -0.062224723398685455, 0.077584892511367798, 0.029414977878332138, -0.60303330421447754, -0.22431543469429016, -0.10335063189268112, 0.21286186575889587, 0.12542757391929626, 
  -0.25557816028594971, 0.081771790981292725, -0.078877970576286316, -0.12137889862060547, -0.14634792506694794, -0.18356652557849884, -0.47432175278663635, -0.20472395420074463, 0.21884861588478088, -0.040855228900909424, 0.190564826130867, 0.19611230492591858, 0.22959336638450623, -0.081376083195209503, 0.038912322372198105, 0.15625302493572235, -0.26443752646446228, -0.12346014380455017, -0.12616991996765137, -0.16065387427806854, -0.041221883147954941, 0.18450765311717987, -0.17184649407863617, -0.067063838243484497, -0.1667504608631134, 0.0611107237637043, -0.22850169241428375, -0.25531518459320068, -0.13746528327465057, 0.22673255205154419, 0.28313115239143372, -0.29784059524536133, -0.26227545738220215, 
  -0.1141219288110733, 0.04090547189116478, 0.081510357558727264, -0.082918025553226471, 0.10703419148921967, -0.20164039731025696, -0.026226472109556198, -0.062576308846473694, -0.10795987397432327, 0.076001405715942383, 0.032954704016447067, 0.21506574749946594, -0.0054330648854374886, -0.14048700034618378, -0.093539692461490631, 0.2653270959854126, -0.087490998208522797, -0.14493028819561005, -0.13316650688648224, 0.23147891461849213, -0.015156710520386696, -0.086213879287242889, -0.091534927487373352, -0.16603700816631317, -0.1482020765542984, -0.22677402198314667, 0.16946506500244141, -0.23766894638538361, 0.03494739904999733, 0.1820618212223053, 0.051670912653207779, -0.060020558536052704, -0.26199439167976379, 
  -0.2572556734085083, -0.22162115573883057, -0.053552929311990738, 0.010784361511468887, -0.13762694597244263, 0.014369051903486252, 0.092024996876716614, -0.22136631608009338, -0.14650332927703857, 0.033488593995571136, -0.1507851779460907, -0.24132892489433289, 0.27538710832595825, -0.031995631754398346, -0.16429537534713745, -0.24305793642997742, -0.20736075937747955, -0.078477993607521057, 0.018847256898880005, -0.13971371948719025, -0.035941954702138901, 0.073139660060405731, 0.084229253232479095, 0.10947240889072418, -0.13204179704189301, -0.19765529036521912, 0.17575950920581818, -0.072866737842559814, -0.43109136819839478, 0.25698703527450562, 0.13069355487823486, 0.18341580033302307, 0.0005087957251816988, 
  -0.14713111519813538, -0.10844400525093079, 0.026130242273211479, 0.20162659883499146, -0.28527766466140747, 0.24886952340602875, -0.098069258034229279, 0.047523587942123413, -0.098158366978168488, -0.040109623223543167, 0.075912676751613617, 0.12226481735706329, -0.40319478511810303, -0.25590941309928894, -0.10052941739559174, 0.18454588949680328, -1.0127991437911987, -0.9038320779800415, 0.027634203433990479, 0.23391275107860565, 0.14925777912139893, 0.068896770477294922, 0.026786193251609802, 0.058083977550268173, 0.07124994695186615, -0.43754330277442932, -0.44188803434371948, -0.30525779724121094, -0.027617299929261208, 0.23479384183883667, -0.14182262122631073, -0.073236450552940369, -0.14465154707431793, 
  -0.24257899820804596, 0.21121956408023834, 0.053969055414199829, 0.11898947507143021, -0.042445573955774307, 0.10950461775064468, -0.043955910950899124, -0.019707083702087402, -0.25321194529533386, -0.22747494280338287, -0.094147868454456329, -0.36871159076690674, 0.20267102122306824, -0.37339106202125549, 0.014675077982246876, -0.18941901624202728, -0.019239045679569244, 0.3340492844581604, 0.27982169389724731, 0.13903383910655975, 0.066228263080120087, -0.43594682216644287, 0.26000380516052246, 0.051140904426574707, 0.13829357922077179, 0.48316150903701782, 0.045810539275407791, -0.23752197623252869, 0.0042832661420106888, 0.14609074592590332, 0.057691052556037903, -0.067828752100467682, 0.076298952102661133, 
  0.098586134612560272, -0.059738930314779282, 0.022972293198108673, -0.096940353512763977, -0.078113079071044922, -0.30892670154571533, -0.30066391825675964, 0.27591192722320557, -0.060494020581245422, -0.12152685225009918, -0.22337757050991058, 0.11222928762435913, -0.12071745097637177, -0.053510300815105438, 0.28404393792152405, -0.13818489015102386, -0.016704149544239044, -0.20027899742126465, 0.15656241774559021, 0.12543952465057373, -0.031022055074572563, 0.21192377805709839, 0.0059708436019718647, 0.083160795271396637, 0.24640995264053345, 0.080115742981433868, 0.22841189801692963, -0.087605968117713928, 0.26971060037612915, -0.031609296798706055, -0.13242387771606445, -0.18238148093223572, -0.067288331687450409, 
  -0.3391607403755188, 0.24289825558662415, -0.16193217039108276, 0.066872738301753998, -0.043789785355329514, 0.014325156807899475, -0.29975426197052002, -0.29855078458786011, -0.048381160944700241, -0.24289229512214661, -0.081765376031398773, -0.18889012932777405, 0.0031507059466093779, -0.3319936990737915, -0.30573120713233948, 0.20610637962818146, -0.22501437366008759, -0.39886632561683655, -0.018542647361755371, -0.070048823952674866, 0.026461722329258919, 0.15323559939861298, 0.027758073061704636, -0.11577438563108444, -0.063692688941955566, -0.10702447593212128, 0.15449993312358856, -0.067090414464473724, 0.20108556747436523, 0.18135681748390198, -0.25539326667785645, -0.24147243797779083, 0.1488175243139267, 
  -0.16991397738456726, -0.1943594217300415, -0.34850853681564331, -0.11954911053180695, 0.20309899747371674, 0.19297155737876892, -0.21366232633590698, -0.21655434370040894, -0.12000987678766251, 0.0032251768279820681, -0.18321153521537781, 0.18654195964336395, -0.19195401668548584, 0.17066808044910431, -0.014631143771111965, 0.25011223554611206, 0.12677653133869171, 0.029539678245782852, -0.29660320281982422, 0.15449723601341248, -0.23401622474193573, 0.19887652993202209, -0.27866500616073608, -0.24256467819213867, -0.12544672191143036, -0.12202274799346924, 0.16821706295013428, -0.23478904366493225, -0.037926871329545975, -0.0011604428291320801, 0.22391697764396667, -0.030299436300992966, -0.11673394590616226, 
  0.10464063286781311, 0.029740011319518089, 0.14188630878925323, -0.43861433863639832, -0.18581958115100861, -0.026110172271728516, -0.016235072165727615, 0.021552175283432007, 0.14827695488929749, -0.25858548283576965, -0.1178671270608902, -0.34983760118484497, -0.19121028482913971, 0.16651591658592224, -0.1448679119348526, -0.1939990371465683, -0.044803962111473083, 0.096127599477767944, -0.18980011343955994, -0.10440293699502945, 0.039788443595170975, -0.0016347633209079504, -0.24838167428970337, -0.089952029287815094, 0.080920130014419556, -0.14160405099391937, -0.34161978960037231, -0.040858559310436249, -0.58170908689498901, -0.12710884213447571, 0.069638900458812714, 0.14229787886142731, -0.040688373148441315, 
  -0.15917788445949554, -0.28170910477638245, -0.2507871687412262, 0.17733694612979889, -0.054977890104055405, -0.29398632049560547, -0.055104982107877731, -0.14395147562026978, -0.15564236044883728, 0.076281003654003143, 0.11813756078481674, -0.21529267728328705, 0.19491516053676605, -0.29918432235717773, -0.11618921905755997, 0.12510783970355988, -0.20193049311637878, 0.26808646321296692, 0.24039578437805176, 0.24483600258827209, 0.055507160723209381, -0.41912928223609924, -0.032234810292720795, 0.21602821350097656, -0.274778813123703, 0.078956924378871918, -0.22203837335109711, 0.082571126520633698, 0.07452690601348877, -0.020784854888916016, -0.024784302338957787, -0.12154161185026169, -0.17836417257785797, 
  0.26813414692878723, 0.23902347683906555, 0.27730998396873474, -0.29241263866424561, 0.15878935158252716, -0.016569120809435844, -0.43387860059738159, 0.056669950485229492, 0.15742553770542145, -0.044218141585588455, 0.13627994060516357, -0.28192397952079773, -0.17339049279689789, -0.18507768213748932, 0.092341974377632141, -0.026123253628611565, -0.70264238119125366, -0.88704758882522583, -0.1962868869304657, -0.026870256289839745, -0.067298561334609985, 0.10308192670345306, -0.14995060861110687, -0.13705269992351532, -0.1508709192276001, -0.024301294237375259, 0.044414177536964417, 0.099078439176082611, 0.20786233246326447, -0.29162845015525818, 0.085321269929409027, -0.041124582290649414, -0.28761506080627441, 
  0.16209596395492554, 0.12548105418682098, -0.098450057208538055, -0.27971494197845459, -0.30613315105438232, -0.2983088493347168, -0.13570667803287506, 0.037833720445632935, -0.26221141219139099, -0.50287193059921265, -0.56279593706130981, -0.044197026640176773, 0.06970813125371933, 0.18175792694091797, -0.31577283143997192, -0.35936892032623291, -0.073504634201526642, -0.2952193021774292, -0.00010162591934204102, -1.1543831825256348, -0.35482019186019897, -0.14990714192390442, 0.13918781280517578, -0.3011339008808136, 0.10196545720100403, -0.33072790503501892, 0.16604427993297577, -0.31079226732254028, -0.22921560704708099, 0.28177261352539062, -0.48026055097579956, 0.014319107867777348, 0.077797718346118927, 
  0.062196649610996246, -0.013954313471913338, 0.17088627815246582, -0.27480816841125488, -0.22060227394104004, -0.34885421395301819, -0.27174967527389526, -0.21588829159736633, -0.31220725178718567, 0.089705847203731537, -0.10457731783390045, -0.29630705714225769, -0.34481525421142578, -0.22090835869312286, 0.12228574603796005, 0.18074053525924683, 0.028466587886214256, 0.19581009447574615, 0.018972188234329224, -0.10232608020305634, -0.024523090571165085, -0.23831968009471893, -0.26242464780807495, -0.28868299722671509, 0.017031352967023849, -0.29813933372497559, 0.038245160132646561, -0.11046994477510452, 0.10818134993314743, 0.21136164665222168, 0.14719530940055847, 0.11642365902662277, -0.17553430795669556, 
  -0.0065932674333453178, -0.28795948624610901, -0.022103242576122284, -0.10553891211748123, 0.12132606655359268, -0.15766075253486633, -0.18266423046588898, 0.14453023672103882, 0.23129649460315704, -0.10200557857751846, 0.22101305425167084, 0.083506733179092407, -0.46018272638320923, -0.10598701983690262, -0.38884264230728149, -0.33174195885658264, 0.023478979244828224, 0.046242412179708481, 0.13721653819084167, 0.089115090668201447, -0.21905159950256348, 0.24508053064346313, 0.086496733129024506, 0.13300676643848419, -0.14945116639137268, -0.21852791309356689, -0.13949888944625854, -0.25026968121528625, -0.75009840726852417, 0.26023900508880615, 0.12238789349794388, 0.16111981868743896, -0.15856300294399261, 
  -0.29050540924072266, 0.54637640714645386, 0.096527598798274994, 0.42598190903663635, -0.20776592195034027, 0.35581082105636597, 0.059491228312253952, -0.24657227098941803, 0.2355775386095047, 0.16183196008205414, 0.11968816816806793, -0.28453800082206726, 0.43716868758201599, 0.27684125304222107, 0.62476563453674316, 0.097437769174575806, 0.14484237134456635, -0.057357646524906158, 0.13280454277992249, 0.16021531820297241, -0.039234008640050888, 0.062577366828918457, 0.24091233313083649, 0.37920871376991272, 0.2823299765586853, 0.36417672038078308, 0.030991977080702782, -0.099068552255630493, 0.19439098238945007, 0.13547021150588989, -0.26035657525062561, -0.054485775530338287, 0.18207892775535583, 
  0.075850047171115875, 0.036866787821054459, -0.16101855039596558, -0.037862442433834076, -0.32798665761947632, 0.28109824657440186, -0.26094967126846313, -0.1204693615436554, -0.23441317677497864, 0.011474865488708019, 0.074202805757522583, 0.086070813238620758, -0.015161297284066677, -0.37817808985710144, -0.35235518217086792, -0.29048573970794678, -0.14734362065792084, -0.023465564474463463, -0.2653447687625885, -0.29119637608528137, -0.2001468688249588, 0.12927363812923431, -0.16599564254283905, 0.039902791380882263, -0.15599890053272247, -0.17379820346832275, 0.079816684126853943, -0.18298591673374176, 0.07022441178560257, 0.21514904499053955, -0.03369397297501564, -0.25752714276313782, -0.020793026313185692, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 32,33 } };
const ALIGN(16) float tensor_data6[16*32] = { 
  -0.23259246349334717, -0.17749348282814026, -0.17076218128204346, 0.2683071494102478, -0.1469956636428833, -0.40663799643516541, -0.1406819224357605, -0.15387645363807678, 0.16978923976421356, -0.070297010242938995, -0.38046696782112122, -0.12478721141815186, -0.13660003244876862, -0.32888856530189514, 0.11828284710645676, -0.21867223083972931, -0.58210313320159912, -0.2041795402765274, 0.24739719927310944, 0.21785299479961395, 0.082972310483455658, 0.28832855820655823, 0.16889464855194092, -0.58054786920547485, 0.26399838924407959, -0.10301781445741653, -0.33331307768821716, 0.24277982115745544, -0.032233066856861115, -0.20481108129024506, -0.18821503221988678, 0.27821144461631775, 
  -0.23124082386493683, 0.28507727384567261, -0.29055100679397583, -0.25281152129173279, -0.021932732313871384, -0.23482221364974976, 0.21275675296783447, 0.10207773000001907, -0.41669970750808716, -0.18202732503414154, -0.1528121680021286, 0.031289555132389069, -0.25594428181648254, 0.04674757644534111, -0.10480102151632309, -0.068925328552722931, 0.16257965564727783, 0.26246622204780579, 0.073144584894180298, 0.13666494190692902, 0.066668614745140076, -0.12971985340118408, -0.45113793015480042, 0.037047315388917923, 0.30642387270927429, -0.38829660415649414, -0.049145080149173737, 0.24871973693370819, 0.15486402809619904, 0.11950802803039551, 0.022508205845952034, 0.089753217995166779, 
  -0.47567284107208252, 0.20243887603282928, -0.32594075798988342, -0.45694580674171448, 0.02504960261285305, 0.26078405976295471, -0.25795093178749084, -0.34829020500183105, 0.14368742704391479, -0.29610905051231384, -0.34342280030250549, 0.29018676280975342, 0.063441075384616852, -0.269449383020401, -0.40679624676704407, -0.044649761170148849, -0.11050313711166382, -0.28418752551078796, -0.16330826282501221, -0.31052425503730774, -0.09320598840713501, 0.084833413362503052, 0.1309424489736557, 0.014518178999423981, -0.019650636240839958, 0.19644086062908173, 0.29177722334861755, 0.21185052394866943, 0.14961047470569611, 0.24515986442565918, -0.018179846927523613, -0.2382921427488327, 
  -0.2809583842754364, 0.074699319899082184, 0.023495569825172424, -0.15308000147342682, -0.14531895518302917, 0.24536804854869843, -0.13584817945957184, 0.27867650985717773, -0.25086212158203125, -0.12890852987766266, -0.12070675939321518, 0.26932826638221741, 0.19119495153427124, 0.28175106644630432, 0.25471407175064087, -0.21676716208457947, -0.012319156900048256, -0.37744686007499695, 0.12513150274753571, 0.03591584786772728, -0.15349593758583069, -0.73378616571426392, 0.21351158618927002, -0.17911958694458008, -0.069882512092590332, -0.35205087065696716, -0.12058310955762863, 0.16870936751365662, 0.23333598673343658, -0.17594525218009949, -0.064916260540485382, 0.30526122450828552, 
  0.045726809650659561, 0.068641029298305511, 0.2574179470539093, -0.065932929515838623, 0.16656245291233063, -0.53052878379821777, -0.077901169657707214, 0.16918651759624481, -0.45434093475341797, -0.075770959258079529, 0.011321805417537689, -0.12104573100805283, -0.18451859056949615, -0.27218103408813477, 0.075346000492572784, 0.28670006990432739, 0.27862286567687988, -0.33822119235992432, 0.28177750110626221, 0.19762967526912689, -0.2723732590675354, 0.29145941138267517, -0.37912234663963318, 0.31441757082939148, -0.10473120957612991, 0.059962321072816849, -0.30419054627418518, -0.073574930429458618, -0.21893814206123352, -0.064668931066989899, -0.35629171133041382, -0.30677592754364014, 
  0.0033229382243007421, -0.15482762455940247, -0.34528172016143799, 0.38777482509613037, 0.20641496777534485, 0.26148995757102966, 0.072160877287387848, 0.2858959436416626, -0.84795224666595459, -0.26190978288650513, -0.2726091742515564, 0.14410082995891571, 0.12831726670265198, 0.26236951351165771, -0.27037590742111206, -0.18360608816146851, -0.13912668824195862, -0.018564300611615181, 0.13328227400779724, -0.074502117931842804, 0.14660957455635071, 0.0086607625707983971, -0.38958624005317688, 0.22238293290138245, -0.38682284951210022, 0.18079930543899536, 0.098003707826137543, 0.24464869499206543, -0.34089994430541992, -0.21497088670730591, -0.06145830824971199, 0.29817897081375122, 
  -0.01818525604903698, 0.08557814359664917, 0.21454836428165436, 0.13990186154842377, 0.042577981948852539, 0.084776386618614197, -0.18990312516689301, 0.22344796359539032, -0.56018435955047607, 0.039460886269807816, 0.1678202897310257, -0.34085533022880554, -0.025311633944511414, 0.35344651341438293, -0.054770320653915405, -0.29852893948554993, -0.16918708384037018, 0.25176748633384705, -0.036556120961904526, -0.1304742842912674, 0.19924464821815491, -0.20005640387535095, -0.24646945297718048, -0.09809652715921402, 0.033713962882757187, 0.017274064943194389, -0.0028872014954686165, -0.27052012085914612, -0.38137510418891907, 0.12665489315986633, 0.044734768569469452, -0.19802942872047424, 
  -0.26886746287345886, -0.22664012014865875, 0.2994573712348938, -0.17630565166473389, -0.19517849385738373, 0.1667051762342453, 0.23612651228904724, 0.054950743913650513, -0.11799300462007523, -0.23475715517997742, -0.16256710886955261, 0.042918864637613297, 0.27005267143249512, 0.22861462831497192, 0.24375233054161072, -0.29628917574882507, -0.34280425310134888, -0.32112622261047363, -0.2553088366985321, 0.039719197899103165, 0.18312828242778778, 0.11048232018947601, -0.31316301226615906, 0.23037709295749664, 0.088459819555282593, 0.0057226433418691158, -0.24147103726863861, 0.068449370563030243, 0.23546162247657776, 0.27841335535049438, -0.029034409672021866, -0.15370704233646393, 
  -0.23187536001205444, -0.20458163321018219, 0.2715054452419281, -0.19300252199172974, -0.17550873756408691, -0.098008349537849426, -0.0016782386228442192, 0.28010097146034241, -0.029159456491470337, -0.17218783497810364, -0.35227838158607483, 0.30260533094406128, 0.22574391961097717, 0.045940451323986053, 0.17110815644264221, 0.12117377668619156, -0.0030435603111982346, -0.29433971643447876, 0.15535329282283783, -0.33234754204750061, -0.19070044159889221, -0.22196553647518158, 0.28389042615890503, 0.10338491946458817, -0.21337342262268066, -0.3269084095954895, -0.23406711220741272, -0.21158745884895325, 0.16817566752433777, -0.31183505058288574, 0.039200518280267715, 0.16261014342308044, 
  -0.13101150095462799, -0.22619609534740448, 0.057558108121156693, -0.025943411514163017, 0.28091979026794434, 0.23654989898204803, -0.32941630482673645, -0.057864457368850708, -0.29087328910827637, 0.31277546286582947, 0.31538689136505127, -0.26229679584503174, 0.14541082084178925, 0.094971776008605957, 0.27890303730964661, -0.19576254487037659, -0.25163730978965759, -0.0010933156590908766, 0.31494349241256714, -0.029583033174276352, 0.017736617475748062, -0.11582191288471222, 0.11995624750852585, 0.10581222921609879, -0.25943282246589661, 0.19549043476581573, 0.1239514946937561, 0.36001488566398621, 0.30761259794235229, 0.020001119002699852, -0.078193187713623047, -0.20553813874721527, 
  -0.0183250792324543, 0.062804177403450012, 0.1893526017665863, -0.072412200272083282, -0.0086958557367324829, -0.32025662064552307, -0.14635865390300751, 0.12026388198137283, 0.18505860865116119, 0.02295386791229248, 0.021878397092223167, 0.13035114109516144, 0.33536562323570251, 0.074472278356552124, 0.28727194666862488, -0.32594954967498779, 0.056574113667011261, -0.032128158956766129, -0.040042664855718613, -0.37110680341720581, -0.18557089567184448, -0.15014304220676422, 0.29781529307365417, -0.11558780819177628, 0.15925733745098114, 0.24996447563171387, 0.24626266956329346, 0.17788681387901306, -0.22298473119735718, -0.13439992070198059, -0.20624226331710815, 0.12872664630413055, 
  0.058497160673141479, -0.3203984797000885, -0.011715142987668514, 0.060252346098423004, -0.076560080051422119, -0.57186031341552734, -0.96119081974029541, 0.006195068359375, -0.24264872074127197, 0.26589059829711914, 0.18776775896549225, -0.27109014987945557, -0.31163135170936584, -0.038713913410902023, 0.037612523883581161, 0.33320465683937073, -0.59897416830062866, 0.10835377126932144, -0.34199941158294678, 0.20323598384857178, 0.21482531726360321, -0.26147735118865967, 0.066114388406276703, 0.13014675676822662, -0.14257098734378815, 0.055251374840736389, -0.16712272167205811, 0.090976282954216003, 0.035229559987783432, 0.2300126850605011, 0.070572160184383392, 0.061033695936203003, 
  -0.010602696798741817, 0.030637694522738457, -0.32912096381187439, -0.35966664552688599, 0.15795409679412842, 0.25358408689498901, 0.15869483351707458, -0.29257300496101379, -0.29136016964912415, -0.079373665153980255, 0.2152506411075592, -0.0079926140606403351, 0.20286697149276733, -0.30254417657852173, 0.18978181481361389, 0.06626417487859726, 0.03200681135058403, 0.11539583653211594, -0.18470753729343414, -0.20001602172851562, -0.072121351957321167, 0.18517535924911499, -0.0036865670699626207, 0.24874059855937958, -0.45603087544441223, 0.203455850481987, 0.026820939034223557, -0.010915114544332027, 0.1479184478521347, 0.19323021173477173, -0.072052955627441406, 0.081881806254386902, 
  -0.20269517600536346, 0.049043431878089905, -0.24591434001922607, 0.27421993017196655, -0.16903300583362579, -0.38478651642799377, -0.1633891761302948, -0.35645708441734314, -0.45305901765823364, -0.25177955627441406, 0.027445022016763687, -0.11813363432884216, 0.2184450775384903, -0.064386382699012756, -0.32841750979423523, -0.24963356554508209, -0.23192846775054932, -0.43150144815444946, -0.19909784197807312, -0.069209814071655273, -0.037904083728790283, -0.039965640753507614, 0.038758028298616409, -0.19999195635318756, 0.19007542729377747, -0.25817587971687317, 0.10204513370990753, -0.0083355866372585297, 0.032397378236055374, -0.0061638383194804192, 0.32933712005615234, 0.06825178861618042, 
  -0.26801881194114685, 0.075270190834999084, 0.18224820494651794, 0.22938553988933563, -0.31062987446784973, 0.34247690439224243, -0.17120093107223511, -0.32383999228477478, -0.24916267395019531, 0.13013541698455811, -0.31376537680625916, 0.05846087634563446, 0.31103485822677612, -0.033975224941968918, -0.041763126850128174, -0.18554790318012238, -0.15708242356777191, 0.29485195875167847, 0.21966865658760071, -0.26612168550491333, -0.048958148807287216, 0.14468000829219818, -0.0019383527105674148, -0.016400095075368881, -0.30202710628509521, 0.010334194637835026, 0.27028852701187134, -0.04834829643368721, 0.10907873511314392, -0.18948948383331299, 0.21646754443645477, 0.042582415044307709, 
  -0.25872385501861572, 0.0075533273629844189, -0.01320045068860054, -0.079663172364234924, -0.12853121757507324, -0.56795030832290649, -0.48599043488502502, -0.080325745046138763, -0.55405163764953613, 0.12806035578250885, 0.019266046583652496, -0.46643900871276855, 0.055450648069381714, 0.29192894697189331, 0.37089830636978149, 0.084460161626338959, 0.099579989910125732, -0.18344229459762573, 0.16557091474533081, -0.23765428364276886, -0.071512952446937561, 0.16934424638748169, -0.21414351463317871, 0.15596364438533783, 0.013819561339914799, 0.1297699362039566, 0.073815204203128815, -0.38054156303405762, -0.17264659702777863, -0.11328517645597458, 0.11933444440364838, -0.13439634442329407, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 16,32 } };
const ALIGN(16) float tensor_data7[16*16] = { 
  -0.20249061286449432, -0.052589777857065201, -0.065735675394535065, -0.33786305785179138, 0.26956266164779663, -0.34131947159767151, 0.061366621404886246, 0.22929823398590088, -0.039155956357717514, -0.19201077520847321, -0.19333630800247192, 0.0020773170981556177, 0.21261367201805115, -0.22010983526706696, -0.025538725778460503, 0.041639521718025208, 
  0.14804738759994507, 0.049423512071371078, 0.20670546591281891, -0.38826897740364075, -0.40712931752204895, -0.22362154722213745, 0.12975053489208221, -0.037632115185260773, -0.23861059546470642, 0.049290042370557785, -0.21708756685256958, -0.43419334292411804, -0.011375481262803078, 0.26794746518135071, -0.22645804286003113, 0.15634173154830933, 
  -0.25223386287689209, 0.11195967346429825, -0.046209495514631271, -0.47190329432487488, 0.29506897926330566, 0.070984318852424622, -0.65230941772460938, -0.549591064453125, -0.29897937178611755, -0.50485295057296753, -0.12855926156044006, -0.29298210144042969, 0.0007819446618668735, 0.36422258615493774, 0.080153487622737885, -0.21847033500671387, 
  -0.75459551811218262, -0.028573676943778992, -0.42896565794944763, 0.13715451955795288, -0.24812324345111847, 0.2248876541852951, 0.35239502787590027, -0.16601529717445374, 0.23423023521900177, -0.32941442728042603, 0.087804161012172699, -0.3067936897277832, 0.26119184494018555, -0.057301320135593414, -0.3342244029045105, 0.24619732797145844, 
  -0.1351776123046875, -0.082880228757858276, 0.11676157265901566, 0.36527988314628601, -0.23195047676563263, -0.040361423045396805, 0.40278109908103943, 0.28363868594169617, 0.063589707016944885, -0.38015246391296387, 0.11059992015361786, -0.44308498501777649, 0.38216924667358398, -0.013082508929073811, -0.19721026718616486, -0.048626616597175598, 
  -0.064629971981048584, 0.13339580595493317, 0.33142420649528503, 0.33815708756446838, 0.35218575596809387, 0.11234698444604874, -0.13670730590820312, 0.15975412726402283, -0.27787819504737854, 0.043301083147525787, 0.25371938943862915, 0.28888231515884399, 0.27336817979812622, -0.13255029916763306, 0.19176717102527618, 0.080080777406692505, 
  -0.38142344355583191, 0.1427508145570755, -0.69998914003372192, -0.30453523993492126, -0.39083531498908997, 0.16549266874790192, 0.11521445214748383, 0.18518522381782532, -0.62200218439102173, 0.20900051295757294, -0.15370304882526398, -0.16166263818740845, 0.087295547127723694, 0.49565804004669189, 0.20074142515659332, 0.39142775535583496, 
  0.38747835159301758, -0.077840186655521393, 0.45132261514663696, -0.02064371295273304, -0.038932051509618759, 0.36079660058021545, 0.24944306910037994, -0.22330746054649353, -0.47975897789001465, -0.23024573922157288, -0.22020326554775238, -0.4820217490196228, -0.033379845321178436, -0.07926381379365921, -0.058351710438728333, -0.2693219780921936, 
  0.024012075737118721, -0.33013996481895447, 0.13518285751342773, 0.3713739812374115, 0.059270735830068588, -0.32632416486740112, 0.35420635342597961, 0.080035887658596039, 0.29404544830322266, -0.12297631800174713, -0.35100266337394714, -0.38355281949043274, -0.039552357047796249, -0.21597549319267273, -0.33020439743995667, -0.029734926298260689, 
  0.28061980009078979, 0.25469988584518433, -0.079858154058456421, -0.3103577196598053, -0.11422926187515259, 0.052863989025354385, -0.35135358572006226, -0.13687080144882202, -0.15905158221721649, -0.15157657861709595, 0.067231021821498871, 0.14287184178829193, -0.73880016803741455, 0.1869465559720993, 0.20833015441894531, -0.17622056603431702, 
  -0.30530732870101929, 0.029404796659946442, 0.38277631998062134, 0.23779915273189545, -0.48655408620834351, -0.34291967749595642, 0.2128225564956665, -0.2923291027545929, -0.3526265025138855, 0.20535629987716675, -0.12917286157608032, 0.006261827889829874, -0.53135842084884644, 0.070097558200359344, -0.42649933695793152, 0.051444351673126221, 
  0.032223813235759735, -0.16763375699520111, -0.30305692553520203, -0.16033124923706055, -0.20181433856487274, -0.13250561058521271, -0.3376462459564209, -0.41867673397064209, -0.012775331735610962, -0.17869408428668976, -0.22198167443275452, -0.075959593057632446, 0.30980357527732849, -0.2943081259727478, -0.28531110286712646, -0.41237518191337585, 
  0.16531039774417877, 0.013381008990108967, -0.15868598222732544, -0.088697060942649841, 0.31861698627471924, 0.35242679715156555, -0.22978906333446503, -0.0099382828921079636, -0.073039412498474121, -0.16782554984092712, 0.11487822234630585, -0.073350287973880768, 0.30660900473594666, -0.30410283803939819, -0.36962869763374329, 0.41553398966789246, 
  -0.013646814040839672, -0.21836063265800476, -0.18549267947673798, 0.11944271624088287, -0.12084825336933136, -0.12670254707336426, 0.083862073719501495, -0.0070962924510240555, 0.29167985916137695, -0.2615012526512146, 0.31588438153266907, -0.037125930190086365, 0.14800700545310974, 0.36744105815887451, 0.13501547276973724, -0.3654133677482605, 
  0.26492810249328613, -0.10716024041175842, 0.093316406011581421, 0.35565972328186035, 0.18615102767944336, 0.037037305533885956, 0.11753808706998825, 0.28122717142105103, 0.35830530524253845, -0.30243667960166931, -0.31796228885650635, 0.42615818977355957, -0.21513819694519043, -0.22435411810874939, -0.21624331176280975, 0.37348407506942749, 
  0.06986449658870697, -0.36112982034683228, -0.22849495708942413, 0.15808926522731781, -0.36109089851379395, 0.17009337246417999, 0.35924160480499268, -0.026059789583086967, -0.045290444046258926, 0.13263963162899017, 0.086300447583198547, -0.50630307197570801, 0.17395548522472382, 0.38330283761024475, 0.43815737962722778, -0.39068254828453064, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 16,16 } };
const ALIGN(16) float tensor_data8[4*16] = { 
  0.10748986154794693, 0.27027693390846252, -0.60614800453186035, -0.28955584764480591, -0.15067864954471588, -0.55985212326049805, 0.41233089566230774, 0.40939804911613464, 0.44859990477561951, -0.26072904467582703, -0.43729951977729797, 0.28356951475143433, -0.12418972700834274, 0.51000475883483887, 0.51234173774719238, -0.32942113280296326, 
  0.1447937935590744, -0.36193954944610596, 0.35588589310646057, -0.44529089331626892, -0.45253452658653259, -0.47972092032432556, 0.18585996329784393, 0.32765978574752808, 0.17640697956085205, 0.13511545956134796, -0.2980726957321167, 0.042974174022674561, -0.32191339135169983, -0.26005753874778748, -0.4345080554485321, 0.56663775444030762, 
  -0.32645195722579956, -0.20020398497581482, -0.48559817671775818, -0.42894244194030762, 0.076529994606971741, -0.50620114803314209, -0.52007162570953369, -0.014983081258833408, 0.1506875604391098, -0.53388243913650513, 0.18884257972240448, -0.0075248479843139648, -0.075455121695995331, 0.19728110730648041, -0.17799383401870728, 0.58219897747039795, 
  0.25325360894203186, 0.41498962044715881, -0.016928033903241158, -0.46391588449478149, 0.24856242537498474, 0.091350525617599487, -0.20210732519626617, -0.26522234082221985, -0.32015809416770935, -0.43092811107635498, -0.46966329216957092, 0.27639651298522949, -0.39108249545097351, -0.54107248783111572, -0.4197763204574585, -0.51963943243026733, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 4,16 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,32 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,16 } };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,16 } };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,4 } };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,4 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,5,4 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 9,6,3 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 10,7,2 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,8,1 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 4224, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 2048, },
  { kTfLiteMmapRo, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1024, },
  { kTfLiteMmapRo, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 256, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension9, 128, },
  { kTfLiteArenaRw, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension10, 64, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 64, },
  { kTfLiteArenaRw, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension12, 16, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 16, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 14;
  for(size_t i = 0; i < 14; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflEvalTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 5; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 5; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  13, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 5; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
